version: '3.8'

# PWA-optimierte HTTPS-Version
# HTTPS: https://217.154.223.78:3000 (für PWA-Installation)

services:
  app:
    build:
      context: https://github.com/Rebelein/RebeleinTask.git
      dockerfile: Dockerfile
    container_name: rebelleintask_pwa
    environment:
      - NODE_ENV=production
      - MONGODB_URI=mongodb://mongo-simple:27017/rebelleintask?directConnection=true
      - NEXT_TELEMETRY_DISABLED=1
      # PWA-URLs
      - NEXTAUTH_URL=https://217.154.223.78:3000
      - NEXT_PUBLIC_APP_URL=https://217.154.223.78:3000
    expose:
      - "3000"
    depends_on:
      - mongo-simple
    restart: unless-stopped
    networks:
      - pwa_network

  mongo-simple:
    image: mongo:7
    container_name: mongo_pwa
    restart: unless-stopped
    environment:
      MONGO_INITDB_DATABASE: rebelleintask
    volumes:
      - mongo_pwa_data:/data/db
    expose:
      - "27017"
    networks:
      - pwa_network

  mongo-express:
    image: mongo-express:1.0.2-18-alpine3.19
    container_name: mongo_express_pwa
    restart: unless-stopped
    environment:
      ME_CONFIG_MONGODB_SERVER: mongo-simple
      ME_CONFIG_MONGODB_PORT: 27017
      ME_CONFIG_BASICAUTH_USERNAME: admin
      ME_CONFIG_BASICAUTH_PASSWORD: admin
    depends_on:
      - mongo-simple
    ports:
      - "8081:8081"
    networks:
      - pwa_network

  # SSL für PWA
  ssl-gen:
    image: alpine:latest
    container_name: ssl_pwa
    volumes:
      - ssl_pwa:/etc/ssl/certs
    command:
      - sh
      - -c
      - |
        apk add --no-cache openssl
        if [ ! -f /etc/ssl/certs/server.crt ]; then
          echo "Erstelle PWA-SSL-Zertifikat..."
          openssl req -x509 -newkey rsa:4096 -nodes -sha256 -days 365 \
            -keyout /etc/ssl/certs/server.key \
            -out /etc/ssl/certs/server.crt \
            -subj "/C=DE/ST=Germany/L=City/O=RebeleinTask/CN=217.154.223.78" \
            -addext "subjectAltName=IP:217.154.223.78,DNS:localhost" \
            -addext "keyUsage=critical,digitalSignature,keyEncipherment" \
            -addext "extendedKeyUsage=serverAuth" \
            -addext "basicConstraints=critical,CA:false"
          echo "PWA SSL-Zertifikat erstellt"
        fi
    restart: "no"
    networks:
      - pwa_network

  # PWA-optimierter HTTPS-Proxy
  nginx-pwa:
    image: nginx:alpine
    container_name: nginx_pwa
    depends_on:
      - app
      - ssl-gen
    ports:
      - "3000:443"
    volumes:
      - ssl_pwa:/etc/ssl/certs:ro
    command:
      - sh
      - -c
      - |
        cat > /etc/nginx/nginx.conf << 'EOF'
        events { worker_connections 1024; }
        http {
            include /etc/nginx/mime.types;
            default_type application/octet-stream;
            
            # SSL-Optimierung
            ssl_protocols TLSv1.2 TLSv1.3;
            ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384;
            ssl_prefer_server_ciphers off;
            ssl_session_cache shared:SSL:10m;
            ssl_session_timeout 10m;
            
            server {
                listen 443 ssl http2;
                server_name _;
                
                ssl_certificate /etc/ssl/certs/server.crt;
                ssl_certificate_key /etc/ssl/certs/server.key;
                
                # PWA-kritische Headers
                add_header Strict-Transport-Security "max-age=31536000" always;
                add_header X-Content-Type-Options nosniff always;
                add_header X-Frame-Options SAMEORIGIN always;
                
                # Service Worker
                location = /sw.js {
                    proxy_pass http://app:3000/sw.js;
                    proxy_set_header Host $host;
                    proxy_set_header X-Forwarded-Proto https;
                    add_header Cache-Control "no-cache, no-store, must-revalidate" always;
                    add_header Service-Worker-Allowed "/" always;
                }
                
                # Web App Manifest
                location = /manifest.webmanifest {
                    proxy_pass http://app:3000/manifest.webmanifest;
                    proxy_set_header Host $host;
                    proxy_set_header X-Forwarded-Proto https;
                    add_header Content-Type "application/manifest+json" always;
                }
                
                # Alle anderen Requests
                location / {
                    proxy_pass http://app:3000;
                    proxy_set_header Host $host;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto https;
                    proxy_set_header X-Forwarded-Host $host;
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade $http_upgrade;
                    proxy_set_header Connection "upgrade";
                    proxy_buffering off;
                    proxy_cache_bypass $http_upgrade;
                }
            }
        }
        EOF
        
        # Warten auf SSL-Zertifikat
        while [ ! -f /etc/ssl/certs/server.crt ]; do
          echo "Warte auf SSL-Zertifikat..."
          sleep 3
        done
        
        echo "Starte PWA-optimierten Nginx..."
        nginx -g "daemon off;"
    restart: unless-stopped
    networks:
      - pwa_network

volumes:
  mongo_pwa_data:
    driver: local
  ssl_pwa:
    driver: local

networks:
  pwa_network:
    driver: bridge
