version: '3.8'

services:
  app:
    build: 
      context: https://github.com/Rebelein/RebeleinTask.git
      dockerfile: Dockerfile
    container_name: rebelleintask_app
    environment:
      - NODE_ENV=production
      - MONGODB_URI=mongodb://mongo:27017/rebelleintask
      - NEXT_TELEMETRY_DISABLED=1
    ports:
      - "3000:3000"
    depends_on:
      - mongo
    restart: unless-stopped
    networks:
      - rebelleintask_network

  mongo:
    image: mongo:7
    container_name: rebelleintask_mongo
    restart: unless-stopped
    command: ["mongod", "--replSet", "rs0", "--bind_ip_all"]
    environment:
      MONGO_INITDB_DATABASE: rebelleintask
    volumes:
      - mongo_data:/data/db
    ports:
      - "27017:27017"
    networks:
      - rebelleintask_network

  mongo-init-replica:
    image: mongo:7
    depends_on:
      - mongo
    entrypoint: ["sh", "-c", "sleep 10 && mongosh --host mongo:27017 --eval 'rs.initiate({_id:\"rs0\",members:[{_id:0,host:\"mongo:27017\"}]})' || true"]
    restart: "no"
    networks:
      - rebelleintask_network

  mongo-express:
    image: mongo-express:1.0.2-18-alpine3.19
    container_name: rebelleintask_mongo_express
    restart: unless-stopped
    environment:
      ME_CONFIG_MONGODB_SERVER: mongo
      ME_CONFIG_MONGODB_PORT: 27017
      ME_CONFIG_BASICAUTH_USERNAME: admin
      ME_CONFIG_BASICAUTH_PASSWORD: admin
    depends_on:
      - mongo
    ports:
      - "8081:8081"
    networks:
      - rebelleintask_network

  # STEP 1: SSL Certificate Generator
  ssl-gen:
    image: alpine:latest
    container_name: ssl_generator
    volumes:
      - ssl_certs:/certs
    command: |
      sh -c "
      echo '🔧 Installing OpenSSL...' &&
      apk add --no-cache openssl &&
      echo '🔑 Generating SSL certificate...' &&
      openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
        -keyout /certs/server.key \
        -out /certs/server.crt \
        -subj '/C=DE/ST=Germany/L=City/O=RebeleinTask/CN=217.154.223.78' &&
      echo '✅ SSL certificate created successfully!' &&
      echo '📁 Certificate files:' &&
      ls -la /certs/ &&
      echo '🎯 Ready for Nginx!'
      "
    restart: "no"

  # STEP 2: Nginx with HTTPS (ROBUST VERSION)
  nginx:
    image: nginx:alpine
    container_name: rebelleintask_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ssl_certs:/etc/nginx/certs:ro
    depends_on:
      - app
      - ssl-gen
    command: |
      sh -c "
      echo '🚀 Starting Nginx with HTTPS...' &&
      
      # Wait for SSL certificates
      echo '⏳ Waiting for SSL certificates...' &&
      while [ ! -f /etc/nginx/certs/server.crt ] || [ ! -f /etc/nginx/certs/server.key ]; do
        echo '⏳ Waiting for SSL files...'
        sleep 2
      done &&
      
      echo '✅ SSL certificates found!' &&
      ls -la /etc/nginx/certs/ &&
      
      # Create nginx config
      echo '📝 Creating Nginx configuration...' &&
      cat > /etc/nginx/nginx.conf << 'EOF'
events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # Logging
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;
    
    # Basic security
    server_tokens off;
    
    # HTTP to HTTPS redirect
    server {
        listen 80;
        server_name _;
        
        location / {
            return 301 https://\$host\$request_uri;
        }
    }
    
    # HTTPS server
    server {
        listen 443 ssl;
        server_name _;
        
        # SSL Configuration
        ssl_certificate /etc/nginx/certs/server.crt;
        ssl_certificate_key /etc/nginx/certs/server.key;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_prefer_server_ciphers on;
        ssl_ciphers HIGH:!aNULL:!MD5;
        
        # PWA Support Headers
        add_header Service-Worker-Allowed \"/\" always;
        add_header X-Content-Type-Options nosniff always;
        add_header X-Frame-Options DENY always;
        
        # Proxy to Next.js app
        location / {
            proxy_pass http://app:3000;
            proxy_http_version 1.1;
            proxy_set_header Upgrade \$http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host \$host;
            proxy_set_header X-Real-IP \$remote_addr;
            proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto \$scheme;
            proxy_cache_bypass \$http_upgrade;
            
            # Timeouts
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
        }
    }
}
EOF

      echo '✅ Nginx configuration created!' &&
      echo '🔍 Testing configuration...' &&
      nginx -t &&
      echo '🚀 Starting Nginx...' &&
      nginx -g 'daemon off;'
      "
    restart: unless-stopped
    networks:
      - rebelleintask_network

volumes:
  mongo_data:
    driver: local
  ssl_certs:
    driver: local

networks:
  rebelleintask_network:
    driver: bridge
