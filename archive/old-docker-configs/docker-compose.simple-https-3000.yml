version: '3.8'

# Vereinfachte HTTPS-Konfiguration für Port 3000
# Zugriff: https://217.154.223.78:3000

services:
  app:
    build:
      context: https://github.com/Rebelein/RebeleinTask.git
      dockerfile: Dockerfile
    container_name: rebelleintask_app
    environment:
      - NODE_ENV=production
      - MONGODB_URI=mongodb://mongo:27017/rebelleintask
      - NEXT_TELEMETRY_DISABLED=1
      # HTTPS-spezifische Umgebungsvariablen
      - NEXTAUTH_URL=https://217.154.223.78:3000
      - NEXT_PUBLIC_APP_URL=https://217.154.223.78:3000
      - FORCE_HTTPS=true
    expose:
      - "3000"
    depends_on:
      - mongo
    restart: unless-stopped
    networks:
      - rebelleintask_network

  mongo:
    image: mongo:7
    container_name: rebelleintask_mongo
    restart: unless-stopped
    command: ["mongod", "--replSet", "rs0", "--bind_ip_all"]
    environment:
      MONGO_INITDB_DATABASE: rebelleintask
    volumes:
      - mongo_data:/data/db
    expose:
      - "27017"
    networks:
      - rebelleintask_network

  mongo-init-replica:
    image: mongo:7
    depends_on:
      - mongo
    entrypoint: ["sh", "-c", "sleep 10 && mongosh --host mongo:27017 --eval 'rs.initiate({_id:\"rs0\",members:[{_id:0,host:\"mongo:27017\"}]})' || true"]
    restart: "no"
    networks:
      - rebelleintask_network

  mongo-express:
    image: mongo-express:1.0.2-18-alpine3.19
    container_name: rebelleintask_mongo_express
    restart: unless-stopped
    environment:
      ME_CONFIG_MONGODB_SERVER: mongo
      ME_CONFIG_MONGODB_PORT: 27017
      ME_CONFIG_BASICAUTH_USERNAME: admin
      ME_CONFIG_BASICAUTH_PASSWORD: admin
    depends_on:
      - mongo
    ports:
      - "8081:8081"
    networks:
      - rebelleintask_network

  # Einfacher SSL-Zertifikat Generator
  ssl-gen:
    image: alpine:latest
    container_name: ssl_generator
    volumes:
      - ssl_certs:/etc/ssl/certs/custom
    command:
      - sh
      - -c
      - |
        apk add --no-cache openssl
        if [ ! -f /etc/ssl/certs/custom/server.crt ]; then
          echo "Generiere einfaches SSL-Zertifikat..."
          
          # Einfaches, aber funktionierendes Zertifikat
          openssl req -x509 -newkey rsa:2048 -keyout /etc/ssl/certs/custom/server.key \
            -out /etc/ssl/certs/custom/server.crt -sha256 -days 365 -nodes \
            -subj "/C=DE/ST=NRW/L=Stadt/O=RebeleinTask/CN=217.154.223.78" \
            -addext "subjectAltName=IP:217.154.223.78,DNS:localhost" \
            -addext "keyUsage=digitalSignature,keyEncipherment" \
            -addext "extendedKeyUsage=serverAuth"
            
          echo "SSL-Zertifikat erstellt!"
          # Zertifikat-Inhalt anzeigen
          openssl x509 -in /etc/ssl/certs/custom/server.crt -text -noout | head -20
        else
          echo "SSL-Zertifikat bereits vorhanden."
        fi
    restart: "no"
    networks:
      - rebelleintask_network

  # Einfacher Nginx HTTPS Proxy
  nginx:
    image: nginx:alpine
    container_name: rebelleintask_nginx_3000
    depends_on:
      - app
      - ssl-gen
    ports:
      - "3000:3000"
    volumes:
      - ssl_certs:/etc/ssl/certs/custom:ro
    command:
      - sh
      - -c
      - |
        cat <<'EOF' > /etc/nginx/nginx.conf
        events {
            worker_connections 1024;
        }

        http {
            include /etc/nginx/mime.types;
            default_type application/octet-stream;

            # Logs für Debugging
            access_log /var/log/nginx/access.log;
            error_log /var/log/nginx/error.log debug;

            server {
                listen 3000 ssl;
                server_name _;

                ssl_certificate /etc/ssl/certs/custom/server.crt;
                ssl_certificate_key /etc/ssl/certs/custom/server.key;
                ssl_protocols TLSv1.2 TLSv1.3;
                ssl_prefer_server_ciphers off;

                # Alle Requests direkt weiterleiten (vereinfacht)
                location / {
                    proxy_pass http://app:3000;
                    proxy_set_header Host $$host;
                    proxy_set_header X-Real-IP $$remote_addr;
                    proxy_set_header X-Forwarded-For $$proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto https;
                    proxy_set_header X-Forwarded-Host $$host;
                    
                    # Moderne Proxy-Einstellungen
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade $$http_upgrade;
                    proxy_set_header Connection "upgrade";
                    proxy_cache_bypass $$http_upgrade;
                    
                    # Timeouts
                    proxy_connect_timeout 60s;
                    proxy_send_timeout 60s;
                    proxy_read_timeout 60s;
                    
                    # Keine Cache-Interferenz
                    proxy_buffering off;
                    proxy_request_buffering off;
                }
            }
        }
        EOF
        
        echo "Warte auf SSL-Zertifikat..."
        while [ ! -f /etc/ssl/certs/custom/server.crt ]; do
          sleep 2
        done
        echo "Starte Nginx..."
        exec nginx -g "daemon off;"
    restart: unless-stopped
    networks:
      - rebelleintask_network

volumes:
  mongo_data:
    driver: local
  ssl_certs:
    driver: local

networks:
  rebelleintask_network:
    driver: bridge
